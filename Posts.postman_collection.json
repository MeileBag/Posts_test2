{
	"info": {
		"_postman_id": "8a27681f-4760-4468-9136-2b56b35636c0",
		"name": "Posts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41791403"
	},
	"item": [
		{
			"name": "All posts with require data",
			"item": [
				{
					"name": "All posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" const responseBody = pm.response.json();",
									"",
									"pm.test('Response status code 200',  () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"   ",
									"});",
									"pm.test('Check properties', () => {",
									"    pm.expect(responseBody).to.be.an('array');",
									"});",
									"pm.test('Check list of post', () => {",
									"    ",
									"    responseBody.forEach((element)=>{",
									"    pm.expect(element).to.be.an(\"object\");",
									"     pm.expect(element.title).to.be.an(\"string\").and.is.not.empty;",
									"      pm.expect(element.body).to.be.a(\"string\");",
									"     pm.expect(element.id).to.be.a(\"number\");",
									"     pm.expect(element.userId).to.be.a(\"number\");",
									"",
									"     })",
									"    ",
									"});",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" const responseBody = pm.response.json();",
									"",
									"pm.test('Response status code 200',  () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"   ",
									"});",
									"pm.test('Check properties', () => {",
									"    pm.expect(responseBody).to.be.an('object').and.is.not.empty",
									"    ;",
									"});",
									"pm.test('Check if there is a booking ID property', () => {",
									"    pm.expect(responseBody).to.have.property('id').to.be.a('number').and.is.not.null;",
									"});",
									"",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/19",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"19"
							]
						}
					},
					"response": []
				},
				{
					"name": "Posts Delete",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/101",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"101"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create posts",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"userId\": 2,\n        \"title\": \"naujas posts\",\n        \"body\": \"illum quis cupiditate provident sit magnam\\nea sed aut omnis\\nveniam maiores ullam consequatur atque\\nadipisci quo iste expedita sit quos voluptas\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Posts byId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"const userId = Number(pm.collectionVariables.get(\"user_id\"));",
									"const userPostId = Number(pm.collectionVariables.get(\"user_post_id\"));",
									"const userTitle = pm.collectionVariables.get(\"user_post_title\");",
									"console.log(userId);",
									"console.log(userPostId);",
									"console.log(userTitle);",
									"",
									"pm.test('Your test name', function (){",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData)",
									"    // pm.expect(jsonData.id).to.be.a(\"number\").and.is.not.null",
									"    // pm.expect(jsonData.userId).to.eql(1);",
									"     pm.expect(jsonData.title).to.eql('string')",
									"    //  pm.expect(jsonData.title).to.eql(pm.collectionVariables.get('randomTitle'));",
									"    // pm.expect(jD.).to.not.equal('qui est esse');",
									"})",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function rand(min, max){",
									"    const minCeiled = Math.ceil(min);",
									"    const maxFlooored =Math.floor(max);",
									"    return Math.floor(Math.random()* (maxFlooored - minCeiled) + minCeiled)",
									" };",
									" let randomTitle = \"Your random number:\" + rand(1, 10);",
									"",
									" pm.collectionVariables.set('randomTitle', randomTitle);",
									" ",
									" const toDoTask = {",
									"    \"userId\":2,",
									"    \"title\":randomTitle",
									"    //  \"completed\":true",
									" };",
									" pm.request.body.raw = toDoTask;"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/19",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"19"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://jsonplaceholder.typicode.com",
			"type": "string"
		},
		{
			"key": "randomTitle",
			"value": ""
		}
	]
}